import asyncio
import operator
from typing import Any

from aiogram.types import Message, CallbackQuery

from aiogram_dialog import DialogManager, StartMode, ShowMode
from aiogram_dialog import Dialog, Window
from aiogram_dialog.widgets.text import Const, Format
from aiogram_dialog.widgets.kbd import Group, Button, Select, Back
from aiogram_dialog.widgets.input import MessageInput

from .progress_observer import build_download_keyboard
from src.tgbot.misc.states import MainDialogSG, SubAlertDialogSG, RulesAgreementDialogSG, ProgressObserverDialogSG

from src.core.external.controllers.user_controller import UserController
from src.core.external.controllers.downloader_controller import DownloaderController

from src.core.domain.entities.download_request import ContentType
from src.core.domain.exceptions.req_handler import *
from src.core.domain.exceptions.downloader import *

from .progress_observer import get_err_msg


def get_supported_sites() -> dict:
    return {
        'depositphotos.com': (True, True),
        'elements.envato.com': (True, False),
        'istockphoto.com': (True, True),
        'eyeem.com': (True, False),
        'gettyimages.com': (True, True),
        'motionarray.com': (True, False),
        'shutterstock.com': (True, False),
        'storyblocks.com': (True, True),
        'videezy.com': (False, True)
    }


def get_content_types() -> dict:
    return {'–§–æ—Ç–æ': ContentType.photo,
            '–í–∏–¥–µ–æ': ContentType.video}


async def on_input_link(m: Message, widget: MessageInput, manager: DialogManager):
    downloader_controller: DownloaderController = manager.middleware_data['downloader_controller']
    user_id = manager.middleware_data['user_id']
    content_type = manager.dialog_data['selected_content_type']
    await manager.done()

    try:
        req_id = await downloader_controller.request_download(user_id, m, content_type)

        await manager.start(ProgressObserverDialogSG.main,
                            data={'req_id': req_id, 'req_msg': m},
                            mode=StartMode.NEW_STACK)
    except DayLimitException as ex:
        await m.answer(f'–ü—Ä–µ–≤—ã—à–µ–Ω –¥–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç –Ω–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ!\n–í–∞–º –¥–æ—Å—Ç—É–ø–Ω–æ: {ex.limit} –∑–∞ –¥–µ–Ω—å')
    except ParallelLimitException as ex:
        await m.answer(f'–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –Ω–∞ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ!\n–í–∞–º –¥–æ—Å—Ç—É–ø–Ω–æ: {ex.limit} –∑–∞ —Ä–∞–∑')
    except ContentDownloaderException as ex:
        await m.answer(get_err_msg(to_fail_status(ex)))
    except SameReqException as ex:
        await m.answer(f'–ù–∞–π–¥–µ–Ω —Ñ–∞–π–ª –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É. –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ –≤ —Ç–µ—á–µ–Ω–∏–µ —Å—É—Ç–æ–∫ –æ—Ç '
                       f'{ex.req.created_date}',
                       reply_markup=build_download_keyboard(ex.req))


async def on_site_selected(callback: CallbackQuery, widget: Any, manager: DialogManager, item: str):
    photo_support, video_support = get_supported_sites()[item]
    manager.dialog_data['photo_support'] = photo_support
    manager.dialog_data['video_support'] = video_support
    manager.dialog_data['selected_site'] = item

    await manager.switch_to(MainDialogSG.content_type_select)


async def on_content_type_selected(callback: CallbackQuery, widget: Any, manager: DialogManager, item: str):
    manager.dialog_data['selected_content_type'] = get_content_types()[item]
    await manager.switch_to(MainDialogSG.download_link_input)


async def sites_getter(**kwargs):
    return {
        'sites': list(map(lambda c: [c], get_supported_sites().keys()))
    }


async def content_types_getter(**kwargs):
    site = kwargs['dialog_manager'].dialog_data['selected_site']
    supported_types_bool = get_supported_sites()[site]
    supported_types = []

    for type_name, is_supported in zip(get_content_types(), supported_types_bool):
        if is_supported:
            supported_types.append(type_name)

    return {
        'content_types': list(map(lambda c: [c], supported_types))
    }


async def run_pre_dialogs(manager: DialogManager):
    user_controller: UserController = manager.middleware_data['user_controller']

    if not await user_controller.is_subscribed(manager):
        await manager.start(SubAlertDialogSG.warn_text, show_mode=ShowMode.SEND)

    elif not user_controller.are_rules_accepted(manager):
        await manager.event.bot.send_message(manager.event.from_user.id, '‚ÄºÔ∏è –í–∫–ª—é—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è, —á—Ç–æ–±—ã –º—ã —Å–º–æ–≥–ª–∏ '
                                                                         '–≤–æ–≤—Ä–µ–º—è —Å–æ–æ–±—â–∏—Ç—å –æ –Ω–æ–≤–æ—Å—Ç—è—Ö –∏ '
                                                                         '–ø–æ–¥–µ–ª–∏—Ç—å—Å—è –¥—Ä—É–≥–æ–π –≤–∞–∂–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π.')
        await asyncio.sleep(2)
        await manager.start(RulesAgreementDialogSG.main, show_mode=ShowMode.SEND)


async def on_process_result(start_data: dict, result: Any, dialog_manager: DialogManager):
    await run_pre_dialogs(dialog_manager)


async def on_dialog_start(start_data: dict, manager: DialogManager):
    await run_pre_dialogs(manager)


main_dialog = Dialog(
    Window(

        Const('''–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è YOLICO –±–æ—Ç–æ–º

–î–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤:

 ‚¨õ  <strong>–ó–∞ –æ–¥–∏–Ω —Ä–∞–∑ –º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–æ–ª—å–∫–æ –æ–¥–Ω—É —Å—Å—ã–ª–∫—É –Ω–∞ —Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å;</strong>

 ‚¨õ  <strong>–û—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ç–æ–ª—å–∫–æ —Å—Å—ã–ª–∫–∏, –±–µ–∑ –ø–æ—Å—Ç–æ—Ä–æ–Ω–Ω–µ–≥–æ —Ç–µ–∫—Å—Ç–∞;</strong>

 ‚¨õ  <strong>–õ–∏–º–∏—Ç –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –≥–µ–Ω–µ—Ä–∞—Ü–∏–π –≤ YOLICO –±–æ—Ç–µ –º–µ–¥–∏–∞–º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –Ω–µ –±–æ–ª–µ–µ 5 —Å—Å—ã–ª–æ–∫ –≤ —Å—É—Ç–∫–∏;</strong>

–í—ã–±–µ—Ä–∏—Ç–µ —Å–∞–π—Ç –∏–∑ –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏ üëá'''),

        Group(
            Select(
                Format('{item[0]}'),
                id='site_list',
                item_id_getter=operator.itemgetter(0),
                items='sites',
                on_click=on_site_selected
            ),
            width=2
        ),
        state=MainDialogSG.main,
        getter=sites_getter
    ),
    Window(
        Const('–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã'),
        Group(
            Select(
                Format('{item[0]}'),
                id='content_type_list',
                item_id_getter=operator.itemgetter(0),
                items='content_types',
                on_click=on_content_type_selected
            ),
            width=2
        ),
        Back(Const('‚óÄ –ù–∞–∑–∞–¥')),
        state=MainDialogSG.content_type_select,
        getter=content_types_getter
    ),
    Window(
        Const('–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –º–µ–¥–∏–∞–º–∞—Ç–µ—Ä–∏–∞–ª:'),
        MessageInput(on_input_link),
        state=MainDialogSG.download_link_input
    ),
    on_start=on_dialog_start,
    on_process_result=on_process_result
)
